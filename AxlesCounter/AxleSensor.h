#ifndef AXLE_SENSOR_H
#define AXLE_SENSOR_H
#include "Common.h"

// класс датчик
// имитирует работу датчика прохода колеса
// содержит счетчик осей и признак занятости сенсорной системы
// не содержит двух сенсорных систем и их счетчиков
// направление движения получает в параметре, а не определяет самостоятельно
// 
// упрощение заключается в том, что датчик не отслеживает проход колеса
// а начинает считать заданное количество осей с заданными интервалами, после выдержки времени необходимого поезду чтобы доехать до датчика
// 
// принцип изменения значения счетчика осей:
// функция generateSensorSignal запускается из отдельного потока
// ей передаётся:
//	количество осей, которые пройдут над датчиком; ( в реальности просто считает проходящие оси, не зная общего количества )
//	направление движения поезда; ( в реальности определяется по двум сенсорным системам )
//	время задержки до начала счета осей; ( время пока поезд доедет до датчика )
//	временной интервал, за который поезд проезжает 1м
// так же в функции расчитывается время занятости сенсорной системы, сколько времени колесо находится над датчиком, при условной длине датчика 25 см
//
// сначала производится выдерка времени на включение в работу,
// затем для каждой оси выполняется занятие сенсорной системы,
// освобождение сенсорной системы,
// изменение счетчика, ( диапазон значений счетчиков 0 ... 32767, правила перехода "0 - 1 = 32767", "32767 + 1 = 0" ) 
// ожидание прохода следующей оси
class AxleSensor {
public:
	// номер датчика, исходное значение счетчика
	AxleSensor(int id, int initialCount);

	~AxleSensor();

	// генерировать заданное количество сигналов (axles) от датчика
	// запускается из потока
	void generateSensorSignal(int axles, int direction, int delay, int axle_delay);

	int getId() const;

	bool getOccupied() const;

	unsigned short getCount() const;

	void print();

private:
	int id;
	int count; // счетчик
	bool occupied; // занятость сенсорной системы
	std::vector<int> delays; // массив задержек между проходами осей
};
#endif